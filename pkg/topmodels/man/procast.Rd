% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/procast.R
\name{procast}
\alias{procast}
\alias{procast_setup}
\alias{procast.default}
\alias{procast.disttree}
\alias{procast.distforest}
\title{Procast: Probabilistic Forecasting}
\usage{
procast(
  object,
  newdata = NULL,
  na.action = na.pass,
  type = "quantile",
  at = 0.5,
  drop = FALSE,
  ...
)

\method{procast}{default}(
  object,
  newdata = NULL,
  na.action = na.pass,
  type = c("quantile", "mean", "variance", "probability", "density", "loglikelihood",
    "distribution", "parameters", "kurtosis", "skewness"),
  at = 0.5,
  drop = FALSE,
  ...
)

procast_setup(
  pars,
  FUN,
  at = NULL,
  drop = FALSE,
  type = "procast",
  elementwise = NULL,
  ...
)

\method{procast}{disttree}(
  object,
  newdata = NULL,
  na.action = na.pass,
  type = c("quantile", "location", "scale", "parameter", "density", "probability"),
  at = 0.5,
  drop = FALSE,
  use_distfamily = TRUE,
  ...
)

\method{procast}{distforest}(
  object,
  newdata = NULL,
  na.action = na.pass,
  type = c("quantile", "location", "scale", "parameter", "density", "probability"),
  at = 0.5,
  drop = FALSE,
  use_distfamily = TRUE,
  ...
)
}
\arguments{
\item{object}{a fitted model object. For the \code{default} method this
needs to have a \code{\link[distributions3]{prodist}} method (or \code{object}
can inherit from \code{distribution} directly).}

\item{newdata}{optionally, a data frame in which to look for variables with
which to predict. If omitted, the original observations are used.}

\item{na.action}{function determining what should be done with missing
values in \code{newdata}.  The default is to employ \code{NA}.}

\item{type}{character specifying the type of probabilistic forecast to
compute.  In \code{procast_setup} the \code{type} is only used for nice
labels of the returned data frame.}

\item{at}{specification of values at which the forecasts should be
evaluated, typically a numeric vector but possibly also a matrix or data
frame.  Additionally, \code{at} can be the character string
\code{"function"} or \code{"list"}, see details below.}

\item{drop}{logical. Should the result be simplified to a vector if possible (by
dropping the dimension attribute)? If \code{FALSE} a matrix is always returned.}

\item{\dots}{further parameters passed to methods.}

\item{pars}{a data frame of predicted distribution parameters.}

\item{FUN}{function to be used for forecasts. Either of type \code{FUN(pars,
\dots)} or \code{FUN(at, pars, \dots)}, see details below.}

\item{elementwise}{logical. Should each element of distribution only be evaluated at the
corresponding element of \code{at} (\code{elementwise = TRUE}) or at all elements
in \code{at} (\code{elementwise = FALSE}). Elementwise evaluation is only possible
if the number of observations is length of \code{at} are the same and in that case a vector of
the same length is returned. Otherwise a matrix is returned. The default is to use
\code{elementwise = TRUE} if possible, and otherwise \code{elementwise = FALSE}.}

\item{use_distfamily}{For intern use only, will not be supported in the future.}
}
\value{
Either a \code{data.frame} of predictions (in case of multivariate
forecasts, or if \code{drop = FALSE}, default) or a vector (in case of a
univariate forecast and additionally \code{drop = TRUE}). Unless \code{at}
is the character string \code{"function"} or \code{"list"} in which case a
(list of) function(s) is returned.
}
\description{
Generic function and methods for computing various kinds of probabilistic
forecasts from (regression) models.
}
\details{
The function \code{procast} provides a unified framework for probabilistic
forcasting (or procasting, for short) based on probabilistic (regression)
models, also known as distributional regression approaches. Typical types
of predictions include quantiles, probabilities, (conditional) expectations,
variances, and (log-)densities. Internally, \code{procast} methods typically
compute the predicted parameters for each observation and then compute the
desired outcome for the distributions with the respective parameters.

Some quantities, e.g., the moments of the distribution (like mean or variance),
can be computed directly from the predicted parameters of the
distribution while others require an additional argument \code{at} which the
distribution is evaluated (e.g., the probability of a quantile or an
observation of the response.

The default \code{procast} method leverages the S3 classes and methods for
probability distributions from the \pkg{distributions3} package. It proceeds
in two steps: First, \code{\link[distributions3]{prodist}} is used to obtain the
predicted probability distribution object. Second, the extractor methods such
as \code{quantile}, \code{\link[distributions3]{cdf}}, etc. are used to
compute quantiles, probabilities, etc. from the distribution objects.

Therefore, to enable \code{procast} for a certain type of model object, the
recommended approach is to implement a \code{prodist} method which can then
be leveraged. However, if the \pkg{distributions3} package does not support
the necessary probability distribution, then it may also be necessary to
implement a new distribution objects, see \code{\link[distributions3]{apply_dpqr}}.

Before adopting the \pkg{distributions3} framework as the recommended workflow
for procasting, the package had taken a different approach which is described
in the following. Note, however, that this will be discontinued when we have
converted all procasting methods to the new workflow.

Old workflow: The function \code{procast_setup} is a convenience wrapper that makes setting
up \code{procast} methods easier for package developers. It takes a data
frame of predicted parameters \code{pars} and a function \code{FUN} which is
to be evaluated at the parameters. This can either have the interface
\code{FUN(pars, \dots)} when the desired quantity can be predicted
directly from the predicted parameters -- or the interface \code{FUN(at,
pars, \dots)} if an additional argument \code{at} is needed.
\code{procast_setup} takes care of suitable expanding \code{at} to the
dimensions of \code{pars}.
}
\examples{
## linear regression models (homoscedastic Gaussian response)
m <- lm(dist ~ speed, data = cars)

## medians on observed data
procast(m)
procast(m, drop = TRUE)

## probability integral transform (PIT) on observed data
procast(m, type = "probability", at = cars$dist)

## log-likelihood contributions
procast(m, type = "density", at = cars$dist, log = TRUE)

## log-likelihood sum
sum(procast(m, type = "density", at = cars$dist, log = TRUE))
logLik(m)


## medians on new data
nd <- data.frame(speed = c(10, 15, 20))
procast(m, newdata = nd)

## different quantile for each observation
procast(m, newdata = nd, at = c(0.25, 0.5, 0.75), elementwise = TRUE)

## all combinations of quantiles and observations
procast(m, newdata = nd, at = c(0.25, 0.5, 0.75), elementwise = FALSE)

}
\keyword{regression}
