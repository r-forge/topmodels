% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/procast.R
\name{procast}
\alias{procast}
\alias{procast.default}
\alias{procast.lm}
\alias{procast.glm}
\alias{procast.bamlss}
\title{Procast: Probabilistic Forecasting}
\usage{
procast(
  object,
  newdata = NULL,
  na.action = na.pass,
  type = "distribution",
  at = 0.5,
  drop = FALSE,
  ...
)

\method{procast}{default}(
  object,
  newdata = NULL,
  na.action = na.pass,
  type = c("distribution", "mean", "variance", "quantile", "probability", "density",
    "loglikelihood", "parameters", "kurtosis", "skewness"),
  at = 0.5,
  drop = FALSE,
  ...
)

\method{procast}{lm}(
  object,
  newdata = NULL,
  na.action = na.pass,
  type = "distribution",
  at = 0.5,
  drop = FALSE,
  ...,
  sigma = "ML"
)

\method{procast}{glm}(
  object,
  newdata = NULL,
  na.action = na.pass,
  type = "distribution",
  at = 0.5,
  drop = FALSE,
  ...,
  dispersion = NULL
)

\method{procast}{bamlss}(
  object,
  newdata = NULL,
  na.action = na.pass,
  type = "distribution",
  at = 0.5,
  drop = FALSE,
  ...,
  distributions3 = FALSE
)
}
\arguments{
\item{object}{a fitted model object. For the \code{default} method this
needs to have a \code{\link[distributions3]{prodist}} method (or \code{object}
can inherit from \code{distribution} directly).}

\item{newdata}{optionally, a data frame in which to look for variables with
which to predict. If omitted, the original observations are used.}

\item{na.action}{function determining what should be done with missing
values in \code{newdata}.  The default is to employ \code{NA}.}

\item{type}{character specifying the type of probabilistic forecast to
compute. Note that \code{type = "probability"} corresponds to cumulative
probability as in \code{pnorm}, \code{pbinom}, etc.}

\item{at}{specification of values at which the forecasts should be
evaluated, typically a numeric vector but possibly also a matrix or data
frame.  Additionally, \code{at} can be the character string
\code{"function"} or \code{"list"}, see details below.}

\item{drop}{logical. Should forecasts be returned in a data frame (default)
or (if possible) dropped to a vector, see return value description below.}

\item{\dots}{further parameters passed to methods. In particular, this includes
the logical argument \code{elementwise = NULL}. Should each element of distribution only be evaluated at the
corresponding element of \code{at} (\code{elementwise = TRUE}) or at all elements
in \code{at} (\code{elementwise = FALSE}). Elementwise evaluation is only possible
if the number of observations is length of \code{at} are the same and in that case a vector of
the same length is returned. Otherwise a matrix is returned. The default is to use
\code{elementwise = TRUE} if possible, and otherwise \code{elementwise = FALSE}.}

\item{sigma}{character or numeric or \code{NULL}. Specification of the standard
deviation \code{sigma} to be used for the \code{\link[distributions3]{Normal}} distribution in the
\code{lm} method. The default \code{"ML"} (or equivalently \code{"MLE"} or \code{NULL})
uses the maximum likelihood estimate based on the residual sum of squares divided
by the number of observations, n. Alternatively, \code{sigma = "OLS"} uses the
least-squares estimate (divided by the residual degrees of freedom, n - k). Finally,
a concrete numeric value can also be specified in \code{sigma}.}

\item{dispersion}{character or numeric or \code{NULL}. Specification of the
dispersion parameter in the \code{glm} method. The default \code{NULL}
(or equivalently \code{"deviance"}) is to use the \code{\link[stats]{deviance}}
divided by the number of observations, n. Alternatively, \code{dispersion = "Chisquared"}
uses the Chi-squared statistic divided by the residual degrees of freedom, n - k.
Finally, a concrete numeric value can also be specified in \code{dispersion}.}
}
\value{
Either a \code{data.frame} of predictions with the same number of rows
as the \code{newdata} (or the original observations if that is \code{NULL}).
If \code{drop = TRUE} predictions with just a single column are simplified
to a vector and predictions with multiple columns to a matrix.
}
\description{
Generic function and methods for computing various kinds of probabilistic
forecasts from (regression) models.
}
\details{
The function \code{procast} provides a unified framework for probabilistic
forcasting (or procasting, for short) based on probabilistic (regression)
models, also known as distributional regression approaches. Typical types
of predictions include quantiles, probabilities, (conditional) expectations,
variances, and (log-)densities. Internally, \code{procast} methods typically
compute the predicted parameters for each observation and then compute the
desired outcome for the distributions with the respective parameters.

Some quantities, e.g., the moments of the distribution (like mean or variance),
can be computed directly from the predicted parameters of the
distribution while others require an additional argument \code{at} which the
distribution is evaluated (e.g., the probability of a quantile or an
observation of the response).

The default \code{procast} method leverages the S3 classes and methods for
probability distributions from the \pkg{distributions3} package. In a first step
the predicted probability distribution object is obtained and, by default
(\code{type = "distribution"}), returned in order to reflect the distributional
nature of the forecast. For all other \code{type}s (e.g., \code{"mean"},
\code{"quantile"}, or \code{"density"}), the corresponding extractor methods
(e.g., \code{mean}, \code{quantile}, or \code{\link[distributions3]{pdf}}) are used to
compute the desired quantity from the distribution objects. The examples
provide some worked illustrations.

Package authors or users, who want to enable \code{procast} for new types
of model objects, only need to provide a suitable \code{\link[distributions3]{prodist}}
extractor for the predicted probability distribution. Then the default \code{procast}
works out of the box. However, if the \pkg{distributions3} package does not support
the necessary probability distribution, then it may also be necessary to
implement a new distribution objects, see \code{\link[distributions3]{apply_dpqr}}.
}
\examples{
## load packages
library("topmodels")
library("distributions3")

## Poisson regression model for FIFA 2018 data:
## number of goals scored by each team in each game, explained by
## predicted ability difference of the competing teams
data("FIFA2018", package = "distributions3")
m <- glm(goals ~ difference, data = FIFA2018, family = poisson)

## predicted probability distributions for all matches (in sample)
head(procast(m))
head(procast(m, drop = TRUE))

## procasts for new data
## much lower, equal, and much higher ability than opponent
nd <- data.frame(difference = c(-1, 0, 1))

## predicted goal distribution object
goals <- procast(m, newdata = nd, drop = TRUE)
goals

## predicted densities/probabilities for scoring 0, 1, ..., 5 goals
procast(m, newdata = nd, type = "density", at = 0:5)
## by hand
pdf(goals, 0:5)

## means and medians
procast(m, newdata = nd, type = "mean")
procast(m, newdata = nd, type = "quantile", at = 0.5)
## by hand
mean(goals)
quantile(goals, 0.5)

## evaluate procast elementwise or for all possible combinations
## of distributions from 'nd' and observations in 'at'
procast(m, newdata = nd, type = "probability", at = 1:3, elementwise = TRUE)
procast(m, newdata = nd, type = "probability", at = 1:3, elementwise = FALSE)

## compute in-sample log-likelihood sum via procast
sum(procast(m, type = "density", at = FIFA2018$goals, log = TRUE))
logLik(m)

}
\keyword{regression}
